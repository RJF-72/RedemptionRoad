import React, { useState, useRef, useEffect } from 'react';
import { Play, Pause, Download, Settings, Zap, Video, Music, TrendingUp } from 'lucide-react';

const SIMusicVideoGenerator = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [audioFile, setAudioFile] = useState(null);
  const [videoMode, setVideoMode] = useState('music'); // 'music' or 'marketing'
  const [marketingText, setMarketingText] = useState({
    headline: 'Your Brand Here',
    subtext: 'Powered by Music',
    cta: 'Learn More'
  });
  const [config, setConfig] = useState({
    swarmSize: 50,
    iterations: 100,
    energyThreshold: 0.7,
    coherenceWeight: 0.8,
    cinematicMode: 'standard' // 'standard', 'cinematic', 'energetic', 'minimal'
  });
  const [generatedFrames, setGeneratedFrames] = useState([]);
  const [sceneTransitions, setSceneTransitions] = useState([]);
  const canvasRef = useRef(null);
  const animationRef = useRef(null);

  // Enhanced SI Model with Multi-Layer Swarms
  class AdvancedMusicVideoSwarm {
    constructor(audioData, config, mode) {
      this.audioData = audioData;
      this.config = config;
      this.mode = mode;
      this.backgroundSwarm = [];
      this.foregroundSwarm = [];
      this.effectsSwarm = [];
      this.textSwarm = [];
      this.bestGlobalState = null;
      this.bestGlobalScore = -Infinity;
      this.sceneMemory = [];
      this.initializeMultiLayerSwarm();
    }

    initializeMultiLayerSwarm() {
      const { swarmSize } = this.config;
      
      // Background swarm - handles ambient colors and depth
      for (let i = 0; i < swarmSize; i++) {
        this.backgroundSwarm.push(this.createParticle('background'));
      }
      
      // Foreground swarm - handles main visual elements
      for (let i = 0; i < swarmSize / 2; i++) {
        this.foregroundSwarm.push(this.createParticle('foreground'));
      }
      
      // Effects swarm - handles particles, trails, glows
      for (let i = 0; i < swarmSize / 3; i++) {
        this.effectsSwarm.push(this.createParticle('effects'));
      }
      
      // Text swarm - handles text animation for marketing
      if (this.mode === 'marketing') {
        for (let i = 0; i < 20; i++) {
          this.textSwarm.push(this.createParticle('text'));
        }
      }
    }

    createParticle(layer) {
      const baseParticle = {
        position: {
          hue: Math.random() * 360,
          saturation: Math.random() * 100,
          brightness: Math.random() * 100,
          motion: Math.random() * 10,
          complexity: Math.random(),
          depth: Math.random(),
          rotation: Math.random() * 360,
          scale: 0.5 + Math.random() * 1.5
        },
        velocity: {},
        bestPosition: null,
        bestScore: -Infinity,
        layer: layer
      };
      
      Object.keys(baseParticle.position).forEach(key => {
        baseParticle.velocity[key] = (Math.random() - 0.5) * (key === 'hue' ? 20 : key === 'rotation' ? 10 : 2);
      });
      
      return baseParticle;
    }

    // Enhanced fitness function with cinematography theory
    evaluateFitness(position, audioFeatures, timeIndex, layer) {
      const { energy, tempo, spectralCentroid, beatStrength, bass, mid, high } = audioFeatures;
      let score = 0;
      
      // Universal rules (all layers)
      const energyScore = (position.brightness / 100) * energy + (position.motion / 10) * energy;
      const beatScore = Math.abs(Math.sin(timeIndex * tempo / 60)) * beatStrength * position.motion;
      const colorScore = (position.saturation / 100) * spectralCentroid;
      
      // Rule of thirds composition
      const ruleOfThirdsScore = this.evaluateRuleOfThirds(position);
      
      // Golden ratio aesthetics
      const goldenRatio = 1.618;
      const aestheticScore = 1 - Math.abs((position.hue / 360) - (1 / goldenRatio));
      
      // Temporal momentum (build-ups and drops)
      const momentumScore = energy > 0.5 ? position.motion / 10 : (1 - position.motion / 10);
      
      // Depth and layering (cinematic)
      const depthScore = layer === 'background' ? position.depth : (1 - position.depth);
      
      // Layer-specific weights
      if (layer === 'background') {
        score = (
          energyScore * 0.15 +
          colorScore * 0.25 +
          aestheticScore * 0.20 +
          depthScore * 0.25 +
          (1 - position.complexity) * 0.15 // Backgrounds should be less complex
        );
      } else if (layer === 'foreground') {
        score = (
          energyScore * 0.30 +
          beatScore * 0.25 +
          ruleOfThirdsScore * 0.20 +
          position.complexity * 0.15 +
          depthScore * 0.10
        );
      } else if (layer === 'effects') {
        // Effects respond strongly to frequency bands
        const bassResponse = bass * (position.scale / 2);
        const highResponse = high * position.motion;
        
        score = (
          beatScore * 0.35 +
          bassResponse * 0.25 +
          highResponse * 0.20 +
          momentumScore * 0.20
        );
      } else if (layer === 'text') {
        // Text needs readability + rhythm
        const readabilityScore = position.brightness > 70 ? 1 : position.brightness / 70;
        const rhythmScore = Math.cos(timeIndex * tempo / 30) * beatStrength;
        
        score = (
          readabilityScore * 0.40 +
          rhythmScore * 0.30 +
          aestheticScore * 0.20 +
          (1 - position.motion / 10) * 0.10 // Text shouldn't move too much
        );
      }
      
      // Cinematography mode adjustments
      if (this.config.cinematicMode === 'cinematic') {
        score *= (1 + depthScore * 0.3); // Emphasize depth
      } else if (this.config.cinematicMode === 'energetic') {
        score *= (1 + energyScore * 0.5); // Emphasize energy
      } else if (this.config.cinematicMode === 'minimal') {
        score *= (1 + (1 - position.complexity) * 0.4); // Emphasize simplicity
      }
      
      return score;
    }

    evaluateRuleOfThirds(position) {
      // Positions near 1/3 and 2/3 lines are more aesthetically pleasing
      const horizontalThirds = [0.33, 0.67];
      const verticalThirds = [0.33, 0.67];
      
      const depthNorm = position.depth;
      const rotationNorm = position.rotation / 360;
      
      let minDistH = 1;
      let minDistV = 1;
      
      horizontalThirds.forEach(third => {
        minDistH = Math.min(minDistH, Math.abs(depthNorm - third));
      });
      
      verticalThirds.forEach(third => {
        minDistV = Math.min(minDistV, Math.abs(rotationNorm - third));
      });
      
      return 1 - ((minDistH + minDistV) / 2);
    }

    // PSO Update with adaptive parameters
    updateParticle(particle, audioFeatures, timeIndex, iteration, swarm) {
      const w = 0.7 - (iteration / this.config.iterations) * 0.5;
      const c1 = 2.0;
      const c2 = 2.0;
      
      // Find local best in neighborhood
      const neighborhoodSize = 5;
      const particleIndex = swarm.indexOf(particle);
      let localBest = particle;
      
      for (let i = -neighborhoodSize; i <= neighborhoodSize; i++) {
        const neighborIndex = (particleIndex + i + swarm.length) % swarm.length;
        if (swarm[neighborIndex].bestScore > localBest.bestScore) {
          localBest = swarm[neighborIndex];
        }
      }
      
      Object.keys(particle.velocity).forEach(key => {
        const r1 = Math.random();
        const r2 = Math.random();
        
        const cognitive = c1 * r1 * (particle.bestPosition[key] - particle.position[key]);
        const social = c2 * r2 * (localBest.bestPosition[key] - particle.position[key]);
        
        particle.velocity[key] = w * particle.velocity[key] + cognitive + social;
        particle.position[key] += particle.velocity[key];
        
        // Boundary constraints
        const bounds = {
          hue: 360,
          saturation: 100,
          brightness: 100,
          motion: 10,
          complexity: 1,
          depth: 1,
          rotation: 360,
          scale: 3
        };
        
        particle.position[key] = Math.max(0, Math.min(bounds[key] || 1, particle.position[key]));
      });
      
      const score = this.evaluateFitness(particle.position, audioFeatures, timeIndex, particle.layer);
      
      if (score > particle.bestScore) {
        particle.bestScore = score;
        particle.bestPosition = { ...particle.position };
      }
    }

    generateFrame(audioFeatures, timeIndex) {
      for (let i = 0; i < this.config.iterations; i++) {
        this.backgroundSwarm.forEach(p => this.updateParticle(p, audioFeatures, timeIndex, i, this.backgroundSwarm));
        this.foregroundSwarm.forEach(p => this.updateParticle(p, audioFeatures, timeIndex, i, this.foregroundSwarm));
        this.effectsSwarm.forEach(p => this.updateParticle(p, audioFeatures, timeIndex, i, this.effectsSwarm));
        if (this.mode === 'marketing') {
          this.textSwarm.forEach(p => this.updateParticle(p, audioFeatures, timeIndex, i, this.textSwarm));
        }
      }
      
      // Get best from each swarm
      const bestBg = this.backgroundSwarm.reduce((best, p) => p.bestScore > best.bestScore ? p : best);
      const bestFg = this.foregroundSwarm.reduce((best, p) => p.bestScore > best.bestScore ? p : best);
      const bestFx = this.effectsSwarm.reduce((best, p) => p.bestScore > best.bestScore ? p : best);
      const bestText = this.mode === 'marketing' ? this.textSwarm.reduce((best, p) => p.bestScore > best.bestScore ? p : best) : null;
      
      return {
        background: bestBg.bestPosition,
        foreground: bestFg.bestPosition,
        effects: bestFx.bestPosition,
        text: bestText ? bestText.bestPosition : null,
        audioFeatures
      };
    }
  }

  // Enhanced audio analysis with frequency bands
  const analyzeAudio = (audioBuffer) => {
    const samples = audioBuffer.getChannelData(0);
    const sampleRate = audioBuffer.sampleRate;
    const features = [];
    const windowSize = Math.floor(sampleRate * 0.1);
    
    for (let i = 0; i < samples.length; i += windowSize) {
      const window = samples.slice(i, Math.min(i + windowSize, samples.length));
      
      // Energy
      const energy = Math.sqrt(window.reduce((sum, s) => sum + s * s, 0) / window.length);
      
      // Simple frequency band separation
      const bass = window.slice(0, Math.floor(window.length * 0.2))
        .reduce((sum, s) => sum + Math.abs(s), 0) / (window.length * 0.2);
      const mid = window.slice(Math.floor(window.length * 0.2), Math.floor(window.length * 0.6))
        .reduce((sum, s) => sum + Math.abs(s), 0) / (window.length * 0.4);
      const high = window.slice(Math.floor(window.length * 0.6))
        .reduce((sum, s) => sum + Math.abs(s), 0) / (window.length * 0.4);
      
      // Zero crossing rate
      let zeroCrossings = 0;
      for (let j = 1; j < window.length; j++) {
        if ((window[j] >= 0 && window[j - 1] < 0) || (window[j] < 0 && window[j - 1] >= 0)) {
          zeroCrossings++;
        }
      }
      
      // Beat detection (simple threshold)
      const beatStrength = energy > 0.02 ? 1 : 0.3;
      
      features.push({
        energy: energy,
        tempo: 120,
        spectralCentroid: zeroCrossings / window.length,
        beatStrength: beatStrength,
        bass: bass * 5,
        mid: mid * 3,
        high: high * 4,
        timeIndex: i / sampleRate
      });
    }
    
    return features;
  };

  const generateVideo = async () => {
    if (!audioFile) return;
    
    setIsGenerating(true);
    setProgress(0);
    setGeneratedFrames([]);
    
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const arrayBuffer = await audioFile.arrayBuffer();
      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
      
      const audioFeatures = analyzeAudio(audioBuffer);
      
      const swarm = new AdvancedMusicVideoSwarm(audioBuffer, config, videoMode);
      
      const frames = [];
      const totalFrames = Math.min(audioFeatures.length, 150);
      
      for (let i = 0; i < totalFrames; i++) {
        const frame = swarm.generateFrame(audioFeatures[i], i);
        frames.push(frame);
        setProgress((i + 1) / totalFrames * 100);
        
        if (i % 10 === 0) {
          await new Promise(resolve => setTimeout(resolve, 0));
        }
      }
      
      setGeneratedFrames(frames);
      playbackFrames(frames);
      
    } catch (error) {
      console.error('Generation error:', error);
      alert('Error generating video. Please try a different audio file.');
    }
    
    setIsGenerating(false);
  };

  const playbackFrames = (frames) => {
    if (!canvasRef.current || frames.length === 0) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    let frameIndex = 0;
    
    const animate = () => {
      if (frameIndex >= frames.length) {
        frameIndex = 0;
      }
      
      const frame = frames[frameIndex];
      const { background, foreground, effects, text, audioFeatures } = frame;
      
      // Clear with fade effect
      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Layer 1: Background
      const bgGradient = ctx.createRadialGradient(
        canvas.width / 2, canvas.height / 2, 0,
        canvas.width / 2, canvas.height / 2, canvas.width * 0.7
      );
      bgGradient.addColorStop(0, `hsl(${background.hue}, ${background.saturation}%, ${background.brightness}%)`);
      bgGradient.addColorStop(1, `hsl(${(background.hue + 30) % 360}, ${background.saturation * 0.8}%, ${background.brightness * 0.3}%)`);
      ctx.fillStyle = bgGradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Layer 2: Effects particles
      const particleCount = Math.floor(20 + effects.motion * 30);
      for (let i = 0; i < particleCount; i++) {
        const angle = (i / particleCount) * Math.PI * 2 + frameIndex * 0.05;
        const radius = effects.motion * 50 + background.depth * 150;
        const x = canvas.width / 2 + Math.cos(angle) * radius;
        const y = canvas.height / 2 + Math.sin(angle) * radius;
        const size = effects.scale * 10 + audioFeatures.bass * 15;
        
        ctx.fillStyle = `hsla(${(effects.hue + i * 15) % 360}, ${effects.saturation}%, ${effects.brightness}%, ${0.3 + effects.complexity * 0.5})`;
        ctx.beginPath();
        ctx.arc(x, y, size, 0, Math.PI * 2);
        ctx.fill();
        
        // Bass-reactive trails
        if (audioFeatures.bass > 0.3) {
          ctx.strokeStyle = `hsla(${effects.hue}, ${effects.saturation}%, ${effects.brightness}%, 0.2)`;
          ctx.lineWidth = 2;
          ctx.beginPath();
          ctx.moveTo(canvas.width / 2, canvas.height / 2);
          ctx.lineTo(x, y);
          ctx.stroke();
        }
      }
      
      // Layer 3: Foreground geometric shapes
      ctx.save();
      ctx.translate(canvas.width / 2, canvas.height / 2);
      ctx.rotate(foreground.rotation * Math.PI / 180);
      
      const shapeSize = 100 + foreground.scale * 80;
      const sides = audioFeatures.energy > 0.5 ? 6 : 4;
      
      ctx.beginPath();
      for (let i = 0; i < sides; i++) {
        const angle = (i / sides) * Math.PI * 2;
        const x = Math.cos(angle) * shapeSize;
        const y = Math.sin(angle) * shapeSize;
        if (i === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
      }
      ctx.closePath();
      
      ctx.strokeStyle = `hsla(${foreground.hue}, ${foreground.saturation}%, ${foreground.brightness}%, 0.8)`;
      ctx.lineWidth = 3 + audioFeatures.high * 5;
      ctx.stroke();
      
      ctx.fillStyle = `hsla(${foreground.hue}, ${foreground.saturation}%, ${foreground.brightness}%, ${0.1 + foreground.complexity * 0.3})`;
      ctx.fill();
      
      ctx.restore();
      
      // Layer 4: Marketing text (if in marketing mode)
      if (videoMode === 'marketing' && text) {
        ctx.save();
        
        // Headline
        ctx.font = `bold ${40 + audioFeatures.beatStrength * 10}px Arial`;
        ctx.fillStyle = `hsl(${text.hue}, ${text.saturation}%, ${text.brightness}%)`;
        ctx.textAlign = 'center';
        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
        ctx.shadowBlur = 10;
        ctx.fillText(marketingText.headline, canvas.width / 2, canvas.height * 0.3 + Math.sin(frameIndex * 0.1) * 10);
        
        // Subtext
        ctx.font = '24px Arial';
        ctx.fillStyle = `hsl(${(text.hue + 180) % 360}, ${text.saturation * 0.8}%, ${text.brightness * 0.9}%)`;
        ctx.fillText(marketingText.subtext, canvas.width / 2, canvas.height * 0.45);
        
        // CTA with beat pulse
        const ctaScale = 1 + audioFeatures.beatStrength * 0.2;
        ctx.font = `bold ${28 * ctaScale}px Arial`;
        ctx.fillStyle = `hsl(${text.hue}, 100%, 70%)`;
        ctx.fillText(marketingText.cta, canvas.width / 2, canvas.height * 0.75);
        
        ctx.restore();
      }
      
      // High-energy flash effect
      if (audioFeatures.energy > 0.8) {
        ctx.fillStyle = `rgba(255, 255, 255, ${(audioFeatures.energy - 0.8) * 0.3})`;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }
      
      frameIndex++;
      animationRef.current = requestAnimationFrame(animate);
    };
    
    animate();
  };

  useEffect(() => {
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-black text-white p-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-5xl font-bold mb-3 flex items-center justify-center gap-3">
            <Zap className="text-yellow-400" size={40} />
            SI Multi-Purpose Video Generator
          </h1>
          <p className="text-xl text-gray-300">Swarm Intelligence • Zero Neural Networks • Pre-Weighted Heuristics</p>
          <p className="text-sm text-blue-400 mt-2">Music Videos + Marketing Content • All Driven by Audio</p>
        </div>

        {/* Mode Selector */}
        <div className="flex justify-center gap-4 mb-6">
          <button
            onClick={() => setVideoMode('music')}
            className={`px-8 py-3 rounded-lg font-semibold flex items-center gap-2 transition-all ${
              videoMode === 'music' 
                ? 'bg-gradient-to-r from-purple-600 to-pink-600 scale-105' 
                : 'bg-white/10 hover:bg-white/20'
            }`}
          >
            <Music size={20} />
            Music Video Mode
          </button>
          <button
            onClick={() => setVideoMode('marketing')}
            className={`px-8 py-3 rounded-lg font-semibold flex items-center gap-2 transition-all ${
              videoMode === 'marketing' 
                ? 'bg-gradient-to-r from-green-600 to-teal-600 scale-105' 
                : 'bg-white/10 hover:bg-white/20'
            }`}
          >
            <TrendingUp size={20} />
            Marketing Mode
          </button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          {/* Control Panel */}
          <div className="bg-white/10 backdrop-blur rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Settings size={20} />
              Configuration
            </h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm mb-2">Audio File</label>
                <input
                  type="file"
                  accept="audio/*"
                  onChange={(e) => setAudioFile(e.target.files[0])}
                  className="w-full bg-white/20 rounded px-3 py-2 text-sm"
                />
              </div>
              
              {videoMode === 'marketing' && (
                <div className="space-y-3 bg-green-500/10 p-3 rounded">
                  <div>
                    <label className="block text-sm mb-1">Headline</label>
                    <input
                      type="text"
                      value={marketingText.headline}
                      onChange={(e) => setMarketingText({...marketingText, headline: e.target.value})}
                      className="w-full bg-white/20 rounded px-2 py-1 text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-sm mb-1">Subtext</label>
                    <input
                      type="text"
                      value={marketingText.subtext}
                      onChange={(e) => setMarketingText({...marketingText, subtext: e.target.value})}
                      className="w-full bg-white/20 rounded px-2 py-1 text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-sm mb-1">Call to Action</label>
                    <input
                      type="text"
                      value={marketingText.cta}
                      onChange={(e) => setMarketingText({...marketingText, cta: e.target.value})}
                      className="w-full bg-white/20 rounded px-2 py-1 text-sm"
                    />
                  </div>
                </div>
              )}
              
              <div>
                <label className="block text-sm mb-2">Cinematography Style</label>
                <select
                  value={config.cinematicMode}
                  onChange={(e) => setConfig({...config, cinematicMode: e.target.value})}
                  className="w-full bg-white/20 rounded px-3 py-2 text-sm"
                >
                  <option value="standard">Standard</option>
                  <option value="cinematic">Cinematic (Depth Focus)</option>
                  <option value="energetic">Energetic (High Motion)</option>
                  <option value="minimal">Minimal (Clean & Simple)</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm mb-2">Swarm Size: {config.swarmSize}</label>
                <input
                  type="range"
                  min="20"
                  max="100"
                  value={config.swarmSize}
                  onChange={(e) => setConfig({...config, swarmSize: parseInt(e.target.value)})}
                  className="w-full"
                />
              </div>
              
              <div>
                <label className="block text-sm mb-2">Iterations: {config.iterations}</label>
                <input
                  type="range"
                  min="50"
                  max="200"
                  value={config.iterations}
                  onChange={(e) => setConfig({...config, iterations: parseInt(e.target.value)})}
                  className="w-full"
                />
              </div>
              
              <div>
                <label className="block text-sm mb-2">Coherence: {config.coherenceWeight.toFixed(2)}</label>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={config.coherenceWeight}
                  onChange={(e) => setConfig({...config, coherenceWeight: parseFloat(e.target.value)})}
                  className="w-full"
                />
              </div>
              
              <button
                onClick={generateVideo}
                disabled={!audioFile || isGenerating}
                className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed py-3 rounded-lg font-semibold flex items-center justify-center gap-2"
              >
                <Play size={20} />
                {isGenerating ? 'Generating...' : 'Generate Video'}
              </button>
              
              {isGenerating && (
                <div className="mt-4">
                  <div className="bg-white/20 rounded-full h-2 overflow-hidden">
                    <div 
                      className="bg-gradient-to-r from-yellow-400 to-orange-500 h-full transition-all duration-300"
                      style={{ width: `${progress}%` }}
                    />
                  </div>
                  <p className="text-sm text-center mt-2">{progress.toFixed(0)}% Complete</p>
                </div>
              )}
            </div>
          </div>

          {/* Technical Info */}
          <div className="bg-white/10 backdrop-blur rounded-lg p-6 lg:col-span-2">
            <h2 className="text-xl font-semibold mb-4">How The SI Engine Works</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
              <div className="bg-white/5 rounded p-3">
                <h3 className="font-semibold text-green-400 mb-1">🧬 Multi-Layer Swarm Architecture</h3>
                <p className="text-gray-300">
                  • Background Swarm: Ambient colors & depth<br/>
                  • Foreground Swarm: Main visual elements<br/>
                  • Effects Swarm: Particles & motion trails<br/>
                  • Text Swarm: Marketing text animation
                </p>
              </div>
              
              <div className="bg-white/5 rounded p-3">
                <h3 className="font-semibold text-blue-400 mb-1">🎨 Cinematography Theory Rules</h3>
                <p className="text-gray-300">
                  • Rule of thirds composition<br/>
                  • Golden ratio color harmonics<br/>
                  • Depth layering (cinematic feel)<br/>
                  • Beat-synchronized motion
                </p>
              </div>
              
              <div className="bg-white/5 rounded p-3">
                <h3 className="font-semibold text-purple-400 mb-1">🎵 Audio-Visual Mapping</h3>
                <p className="text-gray-300">
                  • Bass → Size & depth pulsing<br/>
                  • Mids → Color saturation<br/>
                  • Highs → Particle density<br/>
                  • Beats → Geometric rotation
                </p>
              </div>
              
              <div className="bg-white/5 rounded p-3">
                <h3 className="font-semibold text-yellow-400 mb-1">⚡ Marketing Video Intelligence</h3>
                <p className="text-gray-300">
                  • Text readability optimization<br/>
                  • CTA beat synchronization<br/>
                  • Brand color preservation<br/>
                  • Attention curve engineering
                </p>
              </div>
              
              <div className="bg-white/5 rounded p-3">
                <h3 className="font-semibold text-pink-400 mb-1">🎯 Why SI Beats Neural Networks</h3>
                <p className="text-gray-300">
                  • No training data needed<br/>
                  • Instant convergence (no epochs)<br/>
                  • 100% interpretable decisions<br/>
                  • Real-time browser performance<br/>
                  • Direct creative control
                </p>
              </div>
              
              <div className="bg-white/5 rounded p-3">
                <h3 className="font-semibold text-orange-400 mb-1">🔬 Pre-Weighted Fitness Components</h3>
                <p className="text-gray-300">
                  Background: Color 25% • Depth 25%<br/>
                  Foreground: Energy 30% • Beat 25%<br/>
                  Effects: Beat 35% • Bass 25%<br/>
                  Text: Readability 40% • Rhythm 30%
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Video Display */}
        <div className="bg-white/10 backdrop-blur rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
            <Video size={20} />
            Generated Video Output
          </h2>
          <div className="relative">
            <canvas
              ref={canvasRef}
              width={800}
              height={450}
              className="w-full rounded-lg border-2 border-white/20 shadow-2xl"
              style={{ backgroundColor: '#000' }}
            />
            {generatedFrames.length === 0 && (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center">
                  <p className="text-gray-400 text-lg mb-2">Upload audio and generate to see results</p>
                  <p className="text-gray-500 text-sm">
                    {videoMode === 'music' 
                      ? 'Pure music visualization with multi-layer swarm intelligence' 
                      : 'Marketing video with text overlays synchronized to music'}
                  </p>
                </div>
              </div>
            )}
          </div>
          
          {generatedFrames.length > 0 && (
            <div className="mt-4 grid grid-cols-3 gap-4 text-sm">
              <div className="bg-green-500/20 rounded p-3">
                <p className="font-semibold text-green-300">✓ Video Generated</p>
                <p className="text-gray-300">{generatedFrames.length} frames</p>
              </div>
              <div className="bg-blue-500/20 rounded p-3">
                <p className="font-semibold text-blue-300">Mode Active</p>
                <p className="text-gray-300">{videoMode === 'music' ? 'Music Video' : 'Marketing Video'}</p>
              </div>
              <div className="bg-purple-500/20 rounded p-3">
                <p className="font-semibold text-purple-300">Engine Status</p>
                <p className="text-gray-300">Multi-layer swarm active</p>
              </div>
            </div>
          )}
        </div>
        
        {/* Theory Deep Dive */}
        <div className="mt-6 bg-gradient-to-r from-indigo-900/50 to-purple-900/50 backdrop-blur rounded-lg p-6 border border-indigo-500/30">
          <h2 className="text-2xl font-bold mb-4 text-indigo-300">🧠 The SI Advantage: Teaching vs Training</h2>
          <div className="space-y-4 text-sm">
            <div>
              <h3 className="font-semibold text-white mb-2">Neural Networks (The Old Way)</h3>
              <p className="text-gray-300">
                • Require millions of training examples<br/>
                • Need expensive GPU clusters<br/>
                • Take days/weeks to train<br/>
                • Black box - can't explain decisions<br/>
                • Prone to hallucinations and biases<br/>
                • Can't incorporate domain expertise directly
              </p>
            </div>
            
            <div className="border-t border-white/20 pt-4">
              <h3 className="font-semibold text-white mb-2">Swarm Intelligence (The SI Way)</h3>
              <p className="text-gray-300">
                • Zero training - just encode your knowledge as rules<br/>
                • Runs on any device, even phones<br/>
                • Instant results (seconds, not days)<br/>
                • Every decision is explainable<br/>
                • Impossible to hallucinate - only follows your rules<br/>
                • You directly teach it music video theory, cinematography, marketing principles
              </p>
            </div>
            
            <div className="border-t border-white/20 pt-4">
              <h3 className="font-semibold text-white mb-2">How to Make This SOTA (State of the Art)</h3>
              <p className="text-gray-300 mb-2">
                Add more pre-weighted rules based on domain knowledge:
              </p>
              <ul className="text-gray-300 space-y-1 ml-4">
                <li>• <span className="text-yellow-300">Scene Templates:</span> Intro/build/drop/outro structures</li>
                <li>• <span className="text-green-300">Color Theory:</span> Complementary/analogous harmony rules</li>
                <li>• <span className="text-blue-300">Narrative Flow:</span> Tension/release patterns</li>
                <li>• <span className="text-pink-300">Brand Guidelines:</span> Logo placement, safe zones, brand colors</li>
                <li>• <span className="text-purple-300">Typography Rules:</span> Readability, hierarchy, contrast ratios</li>
                <li>• <span className="text-orange-300">Motion Design:</span> Easing functions, anticipation, follow-through</li>
              </ul>
            </div>
            
            <div className="border-t border-white/20 pt-4 bg-white/5 p-4 rounded">
              <h3 className="font-semibold text-yellow-300 mb-2">💡 The Revolutionary Insight</h3>
              <p className="text-white">
                Instead of trying to make AI "learn" what makes good videos from millions of examples, 
                you just <span className="font-bold text-yellow-300">TELL IT</span> what makes good videos using weighted rules. 
                The swarm then finds the optimal combination of those rules for each moment in the music.
                <br/><br/>
                <span className="text-green-300 font-semibold">You're not training an AI. You're teaching it. Big difference.</span>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SIMusicVideoGenerator;
              